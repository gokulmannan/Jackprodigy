import { __rest } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { ScriptLoaderService } from '../../script-loader/script-loader.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../script-loader/script-loader.service';
export class ChartWrapperComponent {
    constructor(element, scriptLoaderService) {
        this.element = element;
        this.scriptLoaderService = scriptLoaderService;
        this.error = new EventEmitter();
        this.ready = new EventEmitter();
        this.select = new EventEmitter();
        this.wrapperReadySubject = new ReplaySubject(1);
        this.initialized = false;
    }
    get chart() {
        if (!this.wrapper) {
            return null;
        }
        return this.wrapper.getChart();
    }
    get wrapperReady$() {
        return this.wrapperReadySubject.asObservable();
    }
    get chartWrapper() {
        return this.wrapper;
    }
    set chartWrapper(wrapper) {
        this.wrapper = wrapper;
        this.drawChart();
    }
    ngOnInit() {
        // We don't need to load any chart packages, the chart wrapper will handle this else for us
        this.scriptLoaderService.loadChartPackages().subscribe(() => {
            if (!this.specs) {
                this.specs = {};
            }
            const _a = this.specs, { containerId, container } = _a, specs = __rest(_a, ["containerId", "container"]);
            // Only ever create the wrapper once to allow animations to happen if something changes.
            this.wrapper = new google.visualization.ChartWrapper(Object.assign(Object.assign({}, specs), { container: this.element.nativeElement }));
            this.registerChartEvents();
            this.wrapperReadySubject.next(this.wrapper);
            this.drawChart();
            this.initialized = true;
        });
    }
    ngOnChanges(changes) {
        if (!this.initialized) {
            return;
        }
        if (changes.specs) {
            this.updateChart();
            this.drawChart();
        }
    }
    updateChart() {
        if (!this.specs) {
            // When creating the wrapper with empty specs, the google charts library will show an error
            // If we don't do this, a javascript error will be thrown, which is not as visible to the user
            this.specs = {};
        }
        this.wrapper.setChartType(this.specs.chartType);
        this.wrapper.setDataTable(this.specs.dataTable); // The typing here are not correct, this also accepts plain arrays
        this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);
        this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);
        this.wrapper.setQuery(this.specs.query);
        this.wrapper.setOptions(this.specs.options);
        this.wrapper.setRefreshInterval(this.specs.refreshInterval);
        this.wrapper.setView(this.specs.view);
    }
    drawChart() {
        this.wrapper.draw();
    }
    registerChartEvents() {
        google.visualization.events.removeAllListeners(this.wrapper);
        const registerChartEvent = (object, eventName, callback) => {
            google.visualization.events.addListener(object, eventName, callback);
        };
        registerChartEvent(this.wrapper, 'ready', () => this.ready.emit({ chart: this.chart }));
        registerChartEvent(this.wrapper, 'error', (error) => this.error.emit(error));
        registerChartEvent(this.wrapper, 'select', () => {
            const selection = this.chart.getSelection();
            this.select.emit({ selection });
        });
    }
}
ChartWrapperComponent.ɵfac = function ChartWrapperComponent_Factory(t) { return new (t || ChartWrapperComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScriptLoaderService)); };
ChartWrapperComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ChartWrapperComponent, selectors: [["chart-wrapper"]], hostAttrs: [1, "chart-wrapper"], inputs: { specs: "specs" }, outputs: { error: "error", ready: "ready", select: "select" }, exportAs: ["chartWrapper"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function ChartWrapperComponent_Template(rf, ctx) { }, styles: ["[_nghost-%COMP%] { width: fit-content; display: block; }"], changeDetection: 0 });
ChartWrapperComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ScriptLoaderService }
];
ChartWrapperComponent.propDecorators = {
    specs: [{ type: Input }],
    error: [{ type: Output }],
    ready: [{ type: Output }],
    select: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChartWrapperComponent, [{
        type: Component,
        args: [{
                selector: 'chart-wrapper',
                template: '',
                host: { class: 'chart-wrapper' },
                exportAs: 'chartWrapper',
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [':host { width: fit-content; display: block; }']
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.ScriptLoaderService }]; }, { error: [{
            type: Output
        }], ready: [{
            type: Output
        }], select: [{
            type: Output
        }], specs: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,