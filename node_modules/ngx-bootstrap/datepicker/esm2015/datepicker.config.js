/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class DatepickerConfig {
    constructor() {
        this.locale = 'en';
        this.datepickerMode = 'day';
        this.startingDay = 0;
        this.yearRange = 20;
        this.minMode = 'day';
        this.maxMode = 'year';
        this.showWeeks = true;
        this.formatDay = 'DD';
        this.formatMonth = 'MMMM';
        this.formatYear = 'YYYY';
        this.formatDayHeader = 'dd';
        this.formatDayTitle = 'MMMM YYYY';
        this.formatMonthTitle = 'YYYY';
        this.onlyCurrentMonth = false;
        this.monthColLimit = 3;
        this.yearColLimit = 5;
        this.shortcutPropagation = false;
    }
}
DatepickerConfig.ɵfac = function DatepickerConfig_Factory(t) { return new (t || DatepickerConfig)(); };
DatepickerConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DatepickerConfig, factory: DatepickerConfig.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatepickerConfig, [{
        type: Injectable
    }], function () { return []; }, null); })();
if (false) {
    /** @type {?} */
    DatepickerConfig.prototype.locale;
    /** @type {?} */
    DatepickerConfig.prototype.datepickerMode;
    /** @type {?} */
    DatepickerConfig.prototype.startingDay;
    /** @type {?} */
    DatepickerConfig.prototype.yearRange;
    /** @type {?} */
    DatepickerConfig.prototype.minMode;
    /** @type {?} */
    DatepickerConfig.prototype.maxMode;
    /** @type {?} */
    DatepickerConfig.prototype.showWeeks;
    /** @type {?} */
    DatepickerConfig.prototype.formatDay;
    /** @type {?} */
    DatepickerConfig.prototype.formatMonth;
    /** @type {?} */
    DatepickerConfig.prototype.formatYear;
    /** @type {?} */
    DatepickerConfig.prototype.formatDayHeader;
    /** @type {?} */
    DatepickerConfig.prototype.formatDayTitle;
    /** @type {?} */
    DatepickerConfig.prototype.formatMonthTitle;
    /** @type {?} */
    DatepickerConfig.prototype.onlyCurrentMonth;
    /** @type {?} */
    DatepickerConfig.prototype.monthColLimit;
    /** @type {?} */
    DatepickerConfig.prototype.yearColLimit;
    /** @type {?} */
    DatepickerConfig.prototype.shortcutPropagation;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci5jb25maWcuanMiLCJzb3VyY2VzIjpbIm5neC1ib290c3RyYXAvZGF0ZXBpY2tlci9kYXRlcGlja2VyLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFHM0MsTUFBTSxPQUFPLGdCQUFnQjtBQUM3QixJQUZBO0FBQ0UsUUFDQSxXQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ2hCLFFBQUUsbUJBQWMsR0FBRyxLQUFLLENBQUM7QUFDekIsUUFBRSxnQkFBVyxHQUFHLENBQUMsQ0FBQztBQUNsQixRQUFFLGNBQVMsR0FBRyxFQUFFLENBQUM7QUFDakIsUUFBRSxZQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ2xCLFFBQUUsWUFBTyxHQUFHLE1BQU0sQ0FBQztBQUNuQixRQUFFLGNBQVMsR0FBRyxJQUFJLENBQUM7QUFDbkIsUUFBRSxjQUFTLEdBQUcsSUFBSSxDQUFDO0FBQ25CLFFBQUUsZ0JBQVcsR0FBRyxNQUFNLENBQUM7QUFDdkIsUUFBRSxlQUFVLEdBQUcsTUFBTSxDQUFDO0FBQ3RCLFFBQUUsb0JBQWUsR0FBRyxJQUFJLENBQUM7QUFDekIsUUFBRSxtQkFBYyxHQUFHLFdBQVcsQ0FBQztBQUMvQixRQUFFLHFCQUFnQixHQUFHLE1BQU0sQ0FBQztBQUM1QixRQUFFLHFCQUFnQixHQUFHLEtBQUssQ0FBQztBQUMzQixRQUFFLGtCQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3BCLFFBQUUsaUJBQVksR0FBRyxDQUFDLENBQUM7QUFDbkIsUUFBRSx3QkFBbUIsR0FBRyxLQUFLLENBQUM7QUFDOUIsSUFBQSxDQUFDO0FBQ0Q7NENBcEJDLFVBQVU7Ozs7Z0RBQ1Q7QUFBQztBQUFhO0FBQ1gsSUFBSCxrQ0FBYztBQUNoQjtBQUFxQixJQUFuQiwwQ0FBdUI7QUFDekI7QUFDRSxJQURBLHVDQUFnQjtBQUNsQjtBQUNHLElBREQscUNBQWU7QUFDakI7QUFDRSxJQURBLG1DQUFnQjtBQUNsQjtBQUNDLElBREMsbUNBQWlCO0FBQ25CO0FBQ0MsSUFEQyxxQ0FBaUI7QUFDbkI7QUFDQyxJQURDLHFDQUFpQjtBQUNuQjtBQUFxQixJQUFuQix1Q0FBcUI7QUFDdkI7QUFBcUIsSUFBbkIsc0NBQW9CO0FBQ3RCO0FBQXFCLElBQW5CLDJDQUF1QjtBQUN6QjtBQUFxQixJQUFuQiwwQ0FBNkI7QUFDL0I7QUFBcUIsSUFBbkIsNENBQTBCO0FBQzVCO0FBQXFCLElBQW5CLDRDQUF5QjtBQUMzQjtBQUNBLElBREUseUNBQWtCO0FBQ3BCO0FBQ0MsSUFEQyx3Q0FBaUI7QUFDbkI7QUFBcUIsSUFBbkIsK0NBQTRCO0FBQzlCO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEYXRlcGlja2VyQ29uZmlnIHtcbiAgbG9jYWxlID0gJ2VuJztcbiAgZGF0ZXBpY2tlck1vZGUgPSAnZGF5JztcbiAgc3RhcnRpbmdEYXkgPSAwO1xuICB5ZWFyUmFuZ2UgPSAyMDtcbiAgbWluTW9kZSA9ICdkYXknO1xuICBtYXhNb2RlID0gJ3llYXInO1xuICBzaG93V2Vla3MgPSB0cnVlO1xuICBmb3JtYXREYXkgPSAnREQnO1xuICBmb3JtYXRNb250aCA9ICdNTU1NJztcbiAgZm9ybWF0WWVhciA9ICdZWVlZJztcbiAgZm9ybWF0RGF5SGVhZGVyID0gJ2RkJztcbiAgZm9ybWF0RGF5VGl0bGUgPSAnTU1NTSBZWVlZJztcbiAgZm9ybWF0TW9udGhUaXRsZSA9ICdZWVlZJztcbiAgb25seUN1cnJlbnRNb250aCA9IGZhbHNlO1xuICBtb250aENvbExpbWl0ID0gMztcbiAgeWVhckNvbExpbWl0ID0gNTtcbiAgc2hvcnRjdXRQcm9wYWdhdGlvbiA9IGZhbHNlO1xufVxuIl19