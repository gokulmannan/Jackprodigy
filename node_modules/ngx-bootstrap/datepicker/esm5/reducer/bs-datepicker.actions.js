/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var BsDatepickerActions = /** @class */ (function () {
    function BsDatepickerActions() {
    }
    /**
     * @return {?}
     */
    BsDatepickerActions.prototype.calculate = /**
     * @return {?}
     */
    function () {
        return { type: BsDatepickerActions.CALCULATE };
    };
    /**
     * @return {?}
     */
    BsDatepickerActions.prototype.format = /**
     * @return {?}
     */
    function () {
        return { type: BsDatepickerActions.FORMAT };
    };
    /**
     * @return {?}
     */
    BsDatepickerActions.prototype.flag = /**
     * @return {?}
     */
    function () {
        return { type: BsDatepickerActions.FLAG };
    };
    /**
     * @param {?} date
     * @return {?}
     */
    BsDatepickerActions.prototype.select = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return {
            type: BsDatepickerActions.SELECT,
            payload: date
        };
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BsDatepickerActions.prototype.changeViewMode = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return {
            type: BsDatepickerActions.CHANGE_VIEWMODE,
            payload: event
        };
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BsDatepickerActions.prototype.navigateTo = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return {
            type: BsDatepickerActions.NAVIGATE_TO,
            payload: event
        };
    };
    /**
     * @param {?} step
     * @return {?}
     */
    BsDatepickerActions.prototype.navigateStep = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        return {
            type: BsDatepickerActions.NAVIGATE_OFFSET,
            payload: step
        };
    };
    /**
     * @param {?} options
     * @return {?}
     */
    BsDatepickerActions.prototype.setOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return {
            type: BsDatepickerActions.SET_OPTIONS,
            payload: options
        };
    };
    // date range picker
    // date range picker
    /**
     * @param {?} value
     * @return {?}
     */
    BsDatepickerActions.prototype.selectRange = 
    // date range picker
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return {
            type: BsDatepickerActions.SELECT_RANGE,
            payload: value
        };
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BsDatepickerActions.prototype.hoverDay = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return {
            type: BsDatepickerActions.HOVER,
            payload: event.isHovered ? event.cell.date : null
        };
    };
    /**
     * @param {?} date
     * @return {?}
     */
    BsDatepickerActions.prototype.minDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return {
            type: BsDatepickerActions.SET_MIN_DATE,
            payload: date
        };
    };
    /**
     * @param {?} date
     * @return {?}
     */
    BsDatepickerActions.prototype.maxDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return {
            type: BsDatepickerActions.SET_MAX_DATE,
            payload: date
        };
    };
    /**
     * @param {?} days
     * @return {?}
     */
    BsDatepickerActions.prototype.daysDisabled = /**
     * @param {?} days
     * @return {?}
     */
    function (days) {
        return {
            type: BsDatepickerActions.SET_DAYSDISABLED,
            payload: days
        };
    };
    /**
     * @param {?} dates
     * @return {?}
     */
    BsDatepickerActions.prototype.datesDisabled = /**
     * @param {?} dates
     * @return {?}
     */
    function (dates) {
        return {
            type: BsDatepickerActions.SET_DATESDISABLED,
            payload: dates
        };
    };
    /**
     * @param {?} dates
     * @return {?}
     */
    BsDatepickerActions.prototype.datesEnabled = /**
     * @param {?} dates
     * @return {?}
     */
    function (dates) {
        return {
            type: BsDatepickerActions.SET_DATESENABLED,
            payload: dates
        };
    };
    /**
     * @param {?} value
     * @return {?}
     */
    BsDatepickerActions.prototype.isDisabled = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return {
            type: BsDatepickerActions.SET_IS_DISABLED,
            payload: value
        };
    };
    /**
     * @param {?} value
     * @return {?}
     */
    BsDatepickerActions.prototype.setDateCustomClasses = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return {
            type: BsDatepickerActions.SET_DATE_CUSTOM_CLASSES,
            payload: value
        };
    };
    /**
     * @param {?} locale
     * @return {?}
     */
    BsDatepickerActions.prototype.setLocale = /**
     * @param {?} locale
     * @return {?}
     */
    function (locale) {
        return {
            type: BsDatepickerActions.SET_LOCALE,
            payload: locale
        };
    };
    BsDatepickerActions.CALCULATE = '[datepicker] calculate dates matrix';
    BsDatepickerActions.FORMAT = '[datepicker] format datepicker values';
    BsDatepickerActions.FLAG = '[datepicker] set flags';
    BsDatepickerActions.SELECT = '[datepicker] select date';
    BsDatepickerActions.NAVIGATE_OFFSET = '[datepicker] shift view date';
    BsDatepickerActions.NAVIGATE_TO = '[datepicker] change view date';
    BsDatepickerActions.SET_OPTIONS = '[datepicker] update render options';
    BsDatepickerActions.HOVER = '[datepicker] hover date';
    BsDatepickerActions.CHANGE_VIEWMODE = '[datepicker] switch view mode';
    BsDatepickerActions.SET_MIN_DATE = '[datepicker] set min date';
    BsDatepickerActions.SET_MAX_DATE = '[datepicker] set max date';
    BsDatepickerActions.SET_DAYSDISABLED = '[datepicker] set days disabled';
    BsDatepickerActions.SET_DATESDISABLED = '[datepicker] set dates disabled';
    BsDatepickerActions.SET_DATESENABLED = '[datepicker] set dates enabled';
    BsDatepickerActions.SET_IS_DISABLED = '[datepicker] set is disabled';
    BsDatepickerActions.SET_DATE_CUSTOM_CLASSES = '[datepicker] set date custom classes';
    BsDatepickerActions.SET_LOCALE = '[datepicker] set datepicker locale';
    BsDatepickerActions.SELECT_RANGE = '[daterangepicker] select dates range';
BsDatepickerActions.ɵfac = function BsDatepickerActions_Factory(t) { return new (t || BsDatepickerActions)(); };
BsDatepickerActions.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BsDatepickerActions, factory: function (t) { return BsDatepickerActions.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BsDatepickerActions, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return BsDatepickerActions;
}());
export { BsDatepickerActions };
if (false) {
    /** @type {?} */
    BsDatepickerActions.CALCULATE;
    /** @type {?} */
    BsDatepickerActions.FORMAT;
    /** @type {?} */
    BsDatepickerActions.FLAG;
    /** @type {?} */
    BsDatepickerActions.SELECT;
    /** @type {?} */
    BsDatepickerActions.NAVIGATE_OFFSET;
    /** @type {?} */
    BsDatepickerActions.NAVIGATE_TO;
    /** @type {?} */
    BsDatepickerActions.SET_OPTIONS;
    /** @type {?} */
    BsDatepickerActions.HOVER;
    /** @type {?} */
    BsDatepickerActions.CHANGE_VIEWMODE;
    /** @type {?} */
    BsDatepickerActions.SET_MIN_DATE;
    /** @type {?} */
    BsDatepickerActions.SET_MAX_DATE;
    /** @type {?} */
    BsDatepickerActions.SET_DAYSDISABLED;
    /** @type {?} */
    BsDatepickerActions.SET_DATESDISABLED;
    /** @type {?} */
    BsDatepickerActions.SET_DATESENABLED;
    /** @type {?} */
    BsDatepickerActions.SET_IS_DISABLED;
    /** @type {?} */
    BsDatepickerActions.SET_DATE_CUSTOM_CLASSES;
    /** @type {?} */
    BsDatepickerActions.SET_LOCALE;
    /** @type {?} */
    BsDatepickerActions.SELECT_RANGE;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnMtZGF0ZXBpY2tlci5hY3Rpb25zLmpzIiwic291cmNlcyI6WyJuZ3gtYm9vdHN0cmFwL2RhdGVwaWNrZXIvcmVkdWNlci9icy1kYXRlcGlja2VyLmFjdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBVzNDO0FBRU0sSUFGTjtBQUNtQixJQTRJbkIsQ0FBQztBQUNEO0FBQVE7QUFBbUI7QUFBUSxJQXRIakMsdUNBQVM7QUFBTztBQUNMO0FBQVEsSUFEbkI7QUFBYyxRQUNaLE9BQU8sRUFBRSxJQUFJLEVBQUUsbUJBQW1CLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDbkQsSUFBRSxDQUFDO0FBRUg7QUFBUTtBQUNGO0FBQVEsSUFEWixvQ0FBTTtBQUFPO0FBQ0Y7QUFBUSxJQURuQjtBQUFjLFFBQ1osT0FBTyxFQUFFLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNoRCxJQUFFLENBQUM7QUFFSDtBQUFRO0FBQ0E7QUFBUSxJQURkLGtDQUFJO0FBQU87QUFDQTtBQUFRLElBRG5CO0FBQWMsUUFDWixPQUFPLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDO0FBQzlDLElBQUUsQ0FBQztBQUVIO0FBQVE7QUFDUjtBQUNNO0FBQVEsSUFGWixvQ0FBTTtBQUFPO0FBQ1I7QUFDTTtBQUFRLElBRm5CLFVBQU8sSUFBVTtBQUFJLFFBQ25CLE9BQU87QUFDWCxZQUFNLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxNQUFNO0FBQ3RDLFlBQU0sT0FBTyxFQUFFLElBQUk7QUFDbkIsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBRUg7QUFBUTtBQUF3QjtBQUFtQjtBQUNoRCxJQURELDRDQUFjO0FBQU87QUFBd0I7QUFDckM7QUFDTCxJQUZILFVBQWUsS0FBMkI7QUFBSSxRQUM1QyxPQUFPO0FBQ1gsWUFBTSxJQUFJLEVBQUUsbUJBQW1C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cUNBQW9FO0FBQ3RFO0FBQXFCLElBQW5CLHNDQUFzRTtBQUN4RTtBQUFxQixJQUFuQixxQ0FBb0U7QUFDdEU7QUFBcUIsSUFBbkIsb0NBQWlFO0FBQ25FO0FBQXFCLElBQW5CLDRDQUFpRjtBQUNuRjtBQUNvQixJQUFsQiwrQkFBa0U7QUFDcEU7QUFDb0IsSUFBbEIsaUNBQXNFO0FBQ3hFO0FBQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaW1lVW5pdCB9IGZyb20gJ25neC1ib290c3RyYXAvY2hyb25vcyc7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICduZ3gtYm9vdHN0cmFwL21pbmktbmdyeCc7XG5pbXBvcnQge1xuICBCc0RhdGVwaWNrZXJWaWV3TW9kZSxcbiAgQnNWaWV3TmF2aWdhdGlvbkV2ZW50LFxuICBDZWxsSG92ZXJFdmVudCxcbiAgRGF0ZXBpY2tlclJlbmRlck9wdGlvbnMsXG4gIERhdGVwaWNrZXJEYXRlQ3VzdG9tQ2xhc3Nlc1xufSBmcm9tICcuLi9tb2RlbHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQnNEYXRlcGlja2VyQWN0aW9ucyB7XG4gIHN0YXRpYyByZWFkb25seSBDQUxDVUxBVEUgPSAnW2RhdGVwaWNrZXJdIGNhbGN1bGF0ZSBkYXRlcyBtYXRyaXgnO1xuICBzdGF0aWMgcmVhZG9ubHkgRk9STUFUID0gJ1tkYXRlcGlja2VyXSBmb3JtYXQgZGF0ZXBpY2tlciB2YWx1ZXMnO1xuICBzdGF0aWMgcmVhZG9ubHkgRkxBRyA9ICdbZGF0ZXBpY2tlcl0gc2V0IGZsYWdzJztcbiAgc3RhdGljIHJlYWRvbmx5IFNFTEVDVCA9ICdbZGF0ZXBpY2tlcl0gc2VsZWN0IGRhdGUnO1xuICBzdGF0aWMgcmVhZG9ubHkgTkFWSUdBVEVfT0ZGU0VUID0gJ1tkYXRlcGlja2VyXSBzaGlmdCB2aWV3IGRhdGUnO1xuICBzdGF0aWMgcmVhZG9ubHkgTkFWSUdBVEVfVE8gPSAnW2RhdGVwaWNrZXJdIGNoYW5nZSB2aWV3IGRhdGUnO1xuICBzdGF0aWMgcmVhZG9ubHkgU0VUX09QVElPTlMgPSAnW2RhdGVwaWNrZXJdIHVwZGF0ZSByZW5kZXIgb3B0aW9ucyc7XG4gIHN0YXRpYyByZWFkb25seSBIT1ZFUiA9ICdbZGF0ZXBpY2tlcl0gaG92ZXIgZGF0ZSc7XG4gIHN0YXRpYyByZWFkb25seSBDSEFOR0VfVklFV01PREUgPSAnW2RhdGVwaWNrZXJdIHN3aXRjaCB2aWV3IG1vZGUnO1xuXG4gIHN0YXRpYyByZWFkb25seSBTRVRfTUlOX0RBVEUgPSAnW2RhdGVwaWNrZXJdIHNldCBtaW4gZGF0ZSc7XG4gIHN0YXRpYyByZWFkb25seSBTRVRfTUFYX0RBVEUgPSAnW2RhdGVwaWNrZXJdIHNldCBtYXggZGF0ZSc7XG4gIHN0YXRpYyByZWFkb25seSBTRVRfREFZU0RJU0FCTEVEID0gJ1tkYXRlcGlja2VyXSBzZXQgZGF5cyBkaXNhYmxlZCc7XG4gIHN0YXRpYyByZWFkb25seSBTRVRfREFURVNESVNBQkxFRCA9ICdbZGF0ZXBpY2tlcl0gc2V0IGRhdGVzIGRpc2FibGVkJztcbiAgc3RhdGljIHJlYWRvbmx5IFNFVF9EQVRFU0VOQUJMRUQgPSAnW2RhdGVwaWNrZXJdIHNldCBkYXRlcyBlbmFibGVkJztcbiAgc3RhdGljIHJlYWRvbmx5IFNFVF9JU19ESVNBQkxFRCA9ICdbZGF0ZXBpY2tlcl0gc2V0IGlzIGRpc2FibGVkJztcbiAgc3RhdGljIHJlYWRvbmx5IFNFVF9EQVRFX0NVU1RPTV9DTEFTU0VTID0gJ1tkYXRlcGlja2VyXSBzZXQgZGF0ZSBjdXN0b20gY2xhc3Nlcyc7XG5cbiAgc3RhdGljIHJlYWRvbmx5IFNFVF9MT0NBTEUgPSAnW2RhdGVwaWNrZXJdIHNldCBkYXRlcGlja2VyIGxvY2FsZSc7XG5cbiAgc3RhdGljIHJlYWRvbmx5IFNFTEVDVF9SQU5HRSA9ICdbZGF0ZXJhbmdlcGlja2VyXSBzZWxlY3QgZGF0ZXMgcmFuZ2UnO1xuXG4gIGNhbGN1bGF0ZSgpOiBBY3Rpb24ge1xuICAgIHJldHVybiB7IHR5cGU6IEJzRGF0ZXBpY2tlckFjdGlvbnMuQ0FMQ1VMQVRFIH07XG4gIH1cblxuICBmb3JtYXQoKTogQWN0aW9uIHtcbiAgICByZXR1cm4geyB0eXBlOiBCc0RhdGVwaWNrZXJBY3Rpb25zLkZPUk1BVCB9O1xuICB9XG5cbiAgZmxhZygpOiBBY3Rpb24ge1xuICAgIHJldHVybiB7IHR5cGU6IEJzRGF0ZXBpY2tlckFjdGlvbnMuRkxBRyB9O1xuICB9XG5cbiAgc2VsZWN0KGRhdGU6IERhdGUpOiBBY3Rpb24ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBCc0RhdGVwaWNrZXJBY3Rpb25zLlNFTEVDVCxcbiAgICAgIHBheWxvYWQ6IGRhdGVcbiAgICB9O1xuICB9XG5cbiAgY2hhbmdlVmlld01vZGUoZXZlbnQ6IEJzRGF0ZXBpY2tlclZpZXdNb2RlKTogQWN0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQnNEYXRlcGlja2VyQWN0aW9ucy5DSEFOR0VfVklFV01PREUsXG4gICAgICBwYXlsb2FkOiBldmVudFxuICAgIH07XG4gIH1cblxuICBuYXZpZ2F0ZVRvKGV2ZW50OiBCc1ZpZXdOYXZpZ2F0aW9uRXZlbnQpOiBBY3Rpb24ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBCc0RhdGVwaWNrZXJBY3Rpb25zLk5BVklHQVRFX1RPLFxuICAgICAgcGF5bG9hZDogZXZlbnRcbiAgICB9O1xuICB9XG5cbiAgbmF2aWdhdGVTdGVwKHN0ZXA6IFRpbWVVbml0KTogQWN0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQnNEYXRlcGlja2VyQWN0aW9ucy5OQVZJR0FURV9PRkZTRVQsXG4gICAgICBwYXlsb2FkOiBzdGVwXG4gICAgfTtcbiAgfVxuXG4gIHNldE9wdGlvbnMob3B0aW9uczogRGF0ZXBpY2tlclJlbmRlck9wdGlvbnMpOiBBY3Rpb24ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBCc0RhdGVwaWNrZXJBY3Rpb25zLlNFVF9PUFRJT05TLFxuICAgICAgcGF5bG9hZDogb3B0aW9uc1xuICAgIH07XG4gIH1cblxuICAvLyBkYXRlIHJhbmdlIHBpY2tlclxuICBzZWxlY3RSYW5nZSh2YWx1ZTogRGF0ZVtdKTogQWN0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQnNEYXRlcGlja2VyQWN0aW9ucy5TRUxFQ1RfUkFOR0UsXG4gICAgICBwYXlsb2FkOiB2YWx1ZVxuICAgIH07XG4gIH1cblxuICBob3ZlckRheShldmVudDogQ2VsbEhvdmVyRXZlbnQpOiBBY3Rpb24ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBCc0RhdGVwaWNrZXJBY3Rpb25zLkhPVkVSLFxuICAgICAgcGF5bG9hZDogZXZlbnQuaXNIb3ZlcmVkID8gZXZlbnQuY2VsbC5kYXRlIDogbnVsbFxuICAgIH07XG4gIH1cblxuICBtaW5EYXRlKGRhdGU6IERhdGUpOiBBY3Rpb24ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBCc0RhdGVwaWNrZXJBY3Rpb25zLlNFVF9NSU5fREFURSxcbiAgICAgIHBheWxvYWQ6IGRhdGVcbiAgICB9O1xuICB9XG5cbiAgbWF4RGF0ZShkYXRlOiBEYXRlKTogQWN0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQnNEYXRlcGlja2VyQWN0aW9ucy5TRVRfTUFYX0RBVEUsXG4gICAgICBwYXlsb2FkOiBkYXRlXG4gICAgfTtcbiAgfVxuXG4gIGRheXNEaXNhYmxlZChkYXlzOiBudW1iZXJbXSk6IEFjdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IEJzRGF0ZXBpY2tlckFjdGlvbnMuU0VUX0RBWVNESVNBQkxFRCxcbiAgICAgIHBheWxvYWQ6IGRheXNcbiAgICB9O1xuICB9XG5cbiAgZGF0ZXNEaXNhYmxlZChkYXRlczogRGF0ZVtdKTogQWN0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQnNEYXRlcGlja2VyQWN0aW9ucy5TRVRfREFURVNESVNBQkxFRCxcbiAgICAgIHBheWxvYWQ6IGRhdGVzXG4gICAgfTtcbiAgfVxuXG4gIGRhdGVzRW5hYmxlZChkYXRlczogRGF0ZVtdKTogQWN0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQnNEYXRlcGlja2VyQWN0aW9ucy5TRVRfREFURVNFTkFCTEVELFxuICAgICAgcGF5bG9hZDogZGF0ZXNcbiAgICB9O1xuICB9XG5cbiAgaXNEaXNhYmxlZCh2YWx1ZTogYm9vbGVhbik6IEFjdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IEJzRGF0ZXBpY2tlckFjdGlvbnMuU0VUX0lTX0RJU0FCTEVELFxuICAgICAgcGF5bG9hZDogdmFsdWVcbiAgICB9O1xuICB9XG5cbiAgc2V0RGF0ZUN1c3RvbUNsYXNzZXModmFsdWU6IERhdGVwaWNrZXJEYXRlQ3VzdG9tQ2xhc3Nlc1tdKTogQWN0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQnNEYXRlcGlja2VyQWN0aW9ucy5TRVRfREFURV9DVVNUT01fQ0xBU1NFUyxcbiAgICAgIHBheWxvYWQ6IHZhbHVlXG4gICAgfTtcbiAgfVxuXG4gIHNldExvY2FsZShsb2NhbGU6IHN0cmluZyk6IEFjdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IEJzRGF0ZXBpY2tlckFjdGlvbnMuU0VUX0xPQ0FMRSxcbiAgICAgIHBheWxvYWQ6IGxvY2FsZVxuICAgIH07XG4gIH1cbn1cbiJdfQ==