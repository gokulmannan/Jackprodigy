{"version":3,"file":"ngx-cookie.umd.js","sources":["../../../projects/ngx-cookie/src/lib/tokens.ts","../../../projects/ngx-cookie/src/lib/utils.ts","../../../projects/ngx-cookie/src/lib/cookie-options.provider.ts","../../../projects/ngx-cookie/src/lib/cookie.service.ts","../../../projects/ngx-cookie/src/lib/cookie-writer.service.ts","../../../projects/ngx-cookie/src/lib/cookie.factory.ts","../../../projects/ngx-cookie/src/lib/cookie.module.ts","../../../projects/ngx-cookie/src/public-api.ts","../../../projects/ngx-cookie/src/ngx-cookie.ts"],"names":["InjectionToken","APP_BASE_HREF","Injectable","Inject","Injector","DOCUMENT","NgModule"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nimport { CookieOptions, ICookieWriterService } from './cookie.model';\n\nexport const COOKIE_OPTIONS = new InjectionToken<CookieOptions>('COOKIE_OPTIONS');\nexport const COOKIE_WRITER = new InjectionToken<ICookieWriterService>('COOKIE_WRITER');\n","import { CookieDict, CookieOptions } from './cookie.model';\n\n// tslint:disable-next-line:no-any\nexport function isNil(obj: any): boolean {\n  return obj === undefined || obj === null;\n}\n\n// tslint:disable-next-line:no-any\nexport function isPresent(obj: any): boolean {\n  return !isNil(obj);\n}\n\n// tslint:disable-next-line:no-any\nexport function isString(obj: any): obj is string {\n  return typeof obj === 'string';\n}\n\n// noinspection JSUnusedGlobalSymbols\n// tslint:disable-next-line:no-any\nexport function isEmpty(value: any): boolean {\n  if (isNil(value)) {\n    return true;\n  }\n  if (value === {}) {\n    return true;\n  }\n  if (Array.isArray(value) && value.length === 0) {\n    return true;\n  }\n  if (typeof value !== 'boolean' && !value) {\n    return true;\n  }\n  // noinspection RedundantIfStatementJS\n  if (Object.keys(value).length === 0 && value.constructor === Object) {\n    return true;\n  }\n  return false;\n}\n\nexport function mergeOptions(oldOptions: CookieOptions, newOptions?: CookieOptions): CookieOptions {\n  if (!newOptions) {\n    return oldOptions;\n  }\n  return {\n    path: isPresent(newOptions.path) ? newOptions.path : oldOptions.path,\n    domain: isPresent(newOptions.domain) ? newOptions.domain : oldOptions.domain,\n    expires: isPresent(newOptions.expires) ? newOptions.expires : oldOptions.expires,\n    secure: isPresent(newOptions.secure) ? newOptions.secure : oldOptions.secure,\n    sameSite: isPresent(newOptions.sameSite) ? newOptions.sameSite : oldOptions.sameSite,\n    httpOnly: isPresent(newOptions.httpOnly) ? newOptions.httpOnly : oldOptions.httpOnly,\n    storeUnencoded: isPresent(newOptions.storeUnencoded) ? newOptions.storeUnencoded : oldOptions.storeUnencoded\n  };\n}\n\nexport function parseCookieString(currentCookieString: string): CookieDict {\n  let lastCookies: CookieDict = {};\n  let lastCookieString = '';\n  let cookieArray: string[];\n  let cookie: string;\n  let i: number;\n  let index: number;\n  let name: string;\n  if (currentCookieString !== lastCookieString) {\n    lastCookieString = currentCookieString;\n    cookieArray = lastCookieString.split('; ');\n    lastCookies = {};\n    for (i = 0; i < cookieArray.length; i++) {\n      cookie = cookieArray[i];\n      index = cookie.indexOf('=');\n      if (index > 0) {  // ignore nameless cookies\n        name = safeDecodeURIComponent(cookie.substring(0, index));\n        // the first value that is seen for a cookie is the most\n        // specific one.  values for the same cookie name that\n        // follow are for less specific paths.\n        if (isNil((lastCookies)[name])) {\n          lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));\n        }\n      }\n    }\n  }\n  return lastCookies;\n}\n\nexport function buildCookieString(name: string, value: string | undefined, options?: CookieOptions): string {\n  let expires: string | Date | undefined = options?.expires;\n  let val: string;\n  if (isNil(value)) {\n    expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\n    val = '';\n  } else {\n    val = value as string;\n  }\n  if (isString(expires)) {\n    expires = new Date(expires);\n  }\n  const cookieValue = options?.storeUnencoded ? value : encodeURIComponent(val);\n  let str = encodeURIComponent(name) + '=' + cookieValue;\n  str += options?.path ? ';path=' + options.path : '';\n  str += options?.domain ? ';domain=' + options.domain : '';\n  str += expires ? ';expires=' + expires.toUTCString() : '';\n  str += options?.sameSite ? '; SameSite=' + options.sameSite : '';\n  str += options?.secure ? ';secure' : '';\n  str += options?.httpOnly ? '; HttpOnly' : '';\n\n  // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n  // - 300 cookies\n  // - 20 cookies per unique domain\n  // - 4096 bytes per cookie\n  const cookieLength = str.length + 1;\n  if (cookieLength > 4096) {\n    console.log('Cookie \\'' + name + '\\' possibly not set or overflowed because it was too large (' + cookieLength + ' > 4096 bytes)!');\n  }\n  return str;\n}\n\nexport function safeDecodeURIComponent(str: string): string {\n  try {\n    return decodeURIComponent(str);\n  } catch (e) {\n    return str;\n  }\n}\n","import { APP_BASE_HREF } from '@angular/common';\nimport { Inject, Injectable, Injector } from '@angular/core';\n\nimport { CookieOptions } from './cookie.model';\nimport { COOKIE_OPTIONS } from './tokens';\nimport { mergeOptions } from './utils';\n\n@Injectable()\nexport class CookieOptionsProvider {\n\n  readonly options: CookieOptions;\n  private readonly defaultOptions: CookieOptions;\n\n  constructor(@Inject(COOKIE_OPTIONS) options: CookieOptions = {},\n              private injector: Injector) {\n    this.defaultOptions = {\n      path: this.injector.get(APP_BASE_HREF, '/'),\n      domain: undefined,\n      expires: undefined,\n      secure: false,\n      httpOnly: false\n    };\n    this.options = mergeOptions(this.defaultOptions, options);\n  }\n\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { CookieOptionsProvider } from './cookie-options.provider';\n\nimport { CookieDict, CookieOptions, ICookieService, ICookieWriterService } from './cookie.model';\nimport { COOKIE_WRITER } from './tokens';\nimport { isNil, isPresent, mergeOptions, parseCookieString } from './utils';\n\n@Injectable()\nexport class CookieService implements ICookieService {\n\n  protected options: CookieOptions;\n\n  constructor(@Inject(DOCUMENT) private document: any,\n              private optionsProvider: CookieOptionsProvider,\n              @Inject(COOKIE_WRITER) private cookieWriterService: ICookieWriterService) {\n    this.options = this.optionsProvider.options;\n  }\n\n  /**\n   * @description\n   * Returns if the given cookie key exists or not.\n   *\n   * @param key Id to use for lookup.\n   * @returns true if key exists, otherwise false.\n   */\n  hasKey(key: string): boolean {\n    const value = this.get(key);\n    return isPresent(value);\n  }\n\n  /**\n   * @description\n   * Returns the value of given cookie key.\n   *\n   * @param key Id to use for lookup.\n   * @returns Raw cookie value.\n   */\n  get(key: string): string {\n    return this.getAll()?.[key];\n  }\n\n  /**\n   * @description\n   * Returns the deserialized value of given cookie key.\n   *\n   * @param key Id to use for lookup.\n   * @returns Deserialized cookie value.\n   */\n  getObject(key: string): object | undefined {\n    const value = this.get(key);\n    if (isNil(value)) {\n      return undefined;\n    } else if (value === '') {\n      return {};\n    }\n    return JSON.parse(value);\n  }\n\n  /**\n   * @description\n   * Returns a key value object with all the cookies.\n   *\n   * @returns All cookies\n   */\n  getAll(): CookieDict {\n    const cookieString = this.cookieWriterService.readAllAsString();\n    return parseCookieString(cookieString);\n  }\n\n  /**\n   * @description\n   * Sets a value for given cookie key.\n   *\n   * @param key Id for the `value`.\n   * @param value Raw value to be stored.\n   * @param options (Optional) Options object.\n   */\n  put(key: string, value: string | undefined, options?: CookieOptions): void {\n    const opts = mergeOptions(this.options, options);\n    this.cookieWriterService.write(key, value, opts);\n  }\n\n  /**\n   * @description\n   * Serializes and sets a value for given cookie key.\n   *\n   * @param key Id for the `value`.\n   * @param value Value to be stored.\n   * @param options (Optional) Options object.\n   */\n  putObject(key: string, value: object, options?: CookieOptions): void {\n    this.put(key, JSON.stringify(value), options);\n  }\n\n  /**\n   * @description\n   * Remove given cookie.\n   *\n   * @param key Id of the key-value pair to delete.\n   * @param options (Optional) Options object.\n   */\n  remove(key: string, options?: CookieOptions): void {\n    this.put(key, undefined, options);\n  }\n\n  /**\n   * @description\n   * Remove all cookies.\n   */\n  removeAll(options?: CookieOptions): void {\n    const cookies = this.getAll();\n    Object.keys(cookies).forEach(key => this.remove(key, options));\n  }\n\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\nimport { CookieOptions, ICookieWriterService } from './cookie.model';\nimport { buildCookieString } from './utils';\n\n@Injectable()\nexport class CookieWriterService implements ICookieWriterService {\n\n  constructor(@Inject(DOCUMENT) private document: any) {}\n\n  readAllAsString(): string {\n    return this.document.cookie || '';\n  }\n\n  write(name: string, value: string | undefined, options?: CookieOptions): void {\n    this.document.cookie = buildCookieString(name, value, options);\n  }\n\n}\n","import { CookieOptionsProvider } from './cookie-options.provider';\nimport { ICookieWriterService } from './cookie.model';\nimport { CookieService } from './cookie.service';\n\nexport function cookieServiceFactory(document: Document,\n                                     cookieOptionsProvider: CookieOptionsProvider,\n                                     cookieWriterService: ICookieWriterService): CookieService {\n  return new CookieService(document, cookieOptionsProvider, cookieWriterService);\n}\n","import { DOCUMENT } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CookieWriterService } from './cookie-writer.service';\n\nimport { CookieOptions } from './cookie.model';\nimport { CookieOptionsProvider } from './cookie-options.provider';\nimport { cookieServiceFactory } from './cookie.factory';\nimport { CookieService } from './cookie.service';\nimport { COOKIE_OPTIONS, COOKIE_WRITER } from './tokens';\n\n\n@NgModule({\n  providers: [CookieOptionsProvider]\n})\nexport class CookieModule {\n  /**\n   * Use this method in your root module to provide the CookieService\n   */\n  static forRoot(options: CookieOptions = {}): ModuleWithProviders<CookieModule> {\n    return {\n      ngModule: CookieModule,\n      providers: [\n        {provide: COOKIE_OPTIONS, useValue: options},\n        {provide: COOKIE_WRITER, useClass: CookieWriterService},\n        {provide: CookieService, useFactory: cookieServiceFactory, deps: [DOCUMENT, CookieOptionsProvider, COOKIE_WRITER]}\n      ]\n    };\n  }\n\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   */\n  static forChild(options: CookieOptions = {}): ModuleWithProviders<CookieModule> {\n    return CookieModule.forRoot(options);\n  }\n}\n","/*\n * Public API Surface of ngx-cookie\n */\n\nexport * from './lib/tokens';\nexport * from './lib/cookie.service';\nexport * from './lib/cookie.module';\nexport * from './lib/cookie.model';\nexport * from './lib/cookie-options.provider';\nexport * from './lib/cookie-writer.service';\nexport * from './lib/cookie.factory';\nexport * from './lib/utils';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}