import { DOCUMENT } from '@angular/common';
import { NgModule } from '@angular/core';
import { CookieWriterService } from './cookie-writer.service';
import { CookieOptionsProvider } from './cookie-options.provider';
import { cookieServiceFactory } from './cookie.factory';
import { CookieService } from './cookie.service';
import { COOKIE_OPTIONS, COOKIE_WRITER } from './tokens';
import * as ɵngcc0 from '@angular/core';
export class CookieModule {
    /**
     * Use this method in your root module to provide the CookieService
     */
    static forRoot(options = {}) {
        return {
            ngModule: CookieModule,
            providers: [
                { provide: COOKIE_OPTIONS, useValue: options },
                { provide: COOKIE_WRITER, useClass: CookieWriterService },
                { provide: CookieService, useFactory: cookieServiceFactory, deps: [DOCUMENT, CookieOptionsProvider, COOKIE_WRITER] }
            ]
        };
    }
    /**
     * Use this method in your other (non root) modules to import the directive/pipe
     */
    static forChild(options = {}) {
        return CookieModule.forRoot(options);
    }
}
CookieModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CookieModule });
CookieModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CookieModule_Factory(t) { return new (t || CookieModule)(); }, providers: [CookieOptionsProvider] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CookieModule, [{
        type: NgModule,
        args: [{
                providers: [CookieOptionsProvider]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWNvb2tpZS9zcmMvbGliL2Nvb2tpZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRzlELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxNQUFNLFVBQVUsQ0FBQzs7QUFNekQsTUFBTSxPQUFPLFlBQVk7QUFDekIsSUFBRTtBQUNGO0FBQ0UsT0FBRztBQUNMLElBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUF5QixFQUFFO0FBQUksUUFDNUMsT0FBTztBQUNYLFlBQU0sUUFBUSxFQUFFLFlBQVk7QUFDNUIsWUFBTSxTQUFTLEVBQUU7QUFDakIsZ0JBQVEsRUFBQyxPQUFPLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUM7QUFDcEQsZ0JBQVEsRUFBQyxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBQztBQUMvRCxnQkFBUSxFQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxxQkFBcUIsRUFBRSxhQUFhLENBQUMsRUFBQztBQUMxSCxhQUFPO0FBQ1AsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0UsT0FBRztBQUNMLElBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUF5QixFQUFFO0FBQUksUUFDN0MsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3pDLElBQUUsQ0FBQztBQUNIO3dDQXhCQyxRQUFRLFNBQUM7TUFDUixTQUFTLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxjQUNuQzs7Ozs7OzBCQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29va2llV3JpdGVyU2VydmljZSB9IGZyb20gJy4vY29va2llLXdyaXRlci5zZXJ2aWNlJztcblxuaW1wb3J0IHsgQ29va2llT3B0aW9ucyB9IGZyb20gJy4vY29va2llLm1vZGVsJztcbmltcG9ydCB7IENvb2tpZU9wdGlvbnNQcm92aWRlciB9IGZyb20gJy4vY29va2llLW9wdGlvbnMucHJvdmlkZXInO1xuaW1wb3J0IHsgY29va2llU2VydmljZUZhY3RvcnkgfSBmcm9tICcuL2Nvb2tpZS5mYWN0b3J5JztcbmltcG9ydCB7IENvb2tpZVNlcnZpY2UgfSBmcm9tICcuL2Nvb2tpZS5zZXJ2aWNlJztcbmltcG9ydCB7IENPT0tJRV9PUFRJT05TLCBDT09LSUVfV1JJVEVSIH0gZnJvbSAnLi90b2tlbnMnO1xuXG5cbkBOZ01vZHVsZSh7XG4gIHByb3ZpZGVyczogW0Nvb2tpZU9wdGlvbnNQcm92aWRlcl1cbn0pXG5leHBvcnQgY2xhc3MgQ29va2llTW9kdWxlIHtcbiAgLyoqXG4gICAqIFVzZSB0aGlzIG1ldGhvZCBpbiB5b3VyIHJvb3QgbW9kdWxlIHRvIHByb3ZpZGUgdGhlIENvb2tpZVNlcnZpY2VcbiAgICovXG4gIHN0YXRpYyBmb3JSb290KG9wdGlvbnM6IENvb2tpZU9wdGlvbnMgPSB7fSk6IE1vZHVsZVdpdGhQcm92aWRlcnM8Q29va2llTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBDb29raWVNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge3Byb3ZpZGU6IENPT0tJRV9PUFRJT05TLCB1c2VWYWx1ZTogb3B0aW9uc30sXG4gICAgICAgIHtwcm92aWRlOiBDT09LSUVfV1JJVEVSLCB1c2VDbGFzczogQ29va2llV3JpdGVyU2VydmljZX0sXG4gICAgICAgIHtwcm92aWRlOiBDb29raWVTZXJ2aWNlLCB1c2VGYWN0b3J5OiBjb29raWVTZXJ2aWNlRmFjdG9yeSwgZGVwczogW0RPQ1VNRU5ULCBDb29raWVPcHRpb25zUHJvdmlkZXIsIENPT0tJRV9XUklURVJdfVxuICAgICAgXVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVXNlIHRoaXMgbWV0aG9kIGluIHlvdXIgb3RoZXIgKG5vbiByb290KSBtb2R1bGVzIHRvIGltcG9ydCB0aGUgZGlyZWN0aXZlL3BpcGVcbiAgICovXG4gIHN0YXRpYyBmb3JDaGlsZChvcHRpb25zOiBDb29raWVPcHRpb25zID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzPENvb2tpZU1vZHVsZT4ge1xuICAgIHJldHVybiBDb29raWVNb2R1bGUuZm9yUm9vdChvcHRpb25zKTtcbiAgfVxufVxuIl19